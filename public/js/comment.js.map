{"version":3,"sources":["comment.js"],"names":[],"mappings":"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","file":"comment.js","sourcesContent":["var data = [\n  {id: 1, name: \"Pete Hunt\", text: \"This is one comment\"},\n  {id: 2, name: \"Jordan Walke\", text: \"This is *another* comment\"}\n];\n\nvar CommentBox = React.createClass({\n\n  loadCommentsFromServer: function() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n\n  handleCommentSubmit: function(comment) {\n    var comments = this.state.data;\n    // Optimistically set an id on the new comment. It will be replaced by an\n    // id generated by the server. In a production application you would likely\n    // not use Date.now() for this and would have a more robust system in place.\n    comment.id = Date.now();\n    var newComments = comments.concat([comment]);\n    this.setState({data: newComments});\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      type: 'POST',\n      data: comment,\n      success: function(data) {\n        this.setState({data: data});\n      }.bind(this),\n      error: function(xhr, status, err) {\n        this.setState({data: comments}); //remove our optimism\n        console.error(this.props.url, status, err.toString());\n      }.bind(this)\n    });\n  },\n\n  getInitialState: function() {\n    return {data: []};\n  },\n\n componentDidMount: function() {\n    this.loadCommentsFromServer();\n    setInterval(this.loadCommentsFromServer, this.props.pollInterval);\n  },\n\n  render: function() {\n    return (\n      <div className=\"commentBox\">\n        <h1>Comments</h1>\n        <CommentList data={this.state.data} />\n        <CommentForm onCommentSubmit={this.handleCommentSubmit} />\n      </div>\n    );\n  }\n});\n\n\n\nvar CommentList = React.createClass({\n  render: function() {\n    var commentNodes = this.props.data.map(function(comment) {\n      return (\n        <Comment name={comment.name} key={comment.id}>\n          {comment.text}\n        </Comment>\n        );\n    });\n    return (\n      <div className=\"commentList\">\n        {commentNodes}\n      </div>\n    );\n    \n  }\n});\n\n\n\nvar CommentForm = React.createClass({\n\n  getInitialState: function() {\n    return {name: '', text: ''};\n  },\n  handleAuthorChange: function(e) {\n    this.setState({name: e.target.value});\n  },\n  handleTextChange: function(e) {\n    this.setState({text: e.target.value});\n  },\n  handleSubmit: function(e) {\n    e.preventDefault();\n    var name = this.state.name.trim();\n    var text = this.state.text.trim();\n    if (!text || !name) {\n      return;\n    }\n    this.props.onCommentSubmit({name: name, text: text});\n    this.setState({name: '', text: ''});\n  },\n\n\n  render: function() {\n    return (\n      <form className=\"commentForm\" onSubmit={this.handleSubmit}>\n         <div className=\"form-group\">\n          <label>Name:</label>\n          <input className=\"form-control\" type=\"text\" placeholder=\"Your name\" value={this.state.name} onChange={this.handleAuthorChange} />\n        </div>\n        <div className=\"form-group\">\n          <label>Comment:</label>\n          <textarea className=\"form-control\" type=\"text\" placeholder=\"Say something...\" value={this.state.text} onChange={this.handleTextChange} ></textarea>\n        </div>\n        <input className=\"btn btn-default\" type=\"submit\" value=\"Post\" />\n      </form>\n    );\n  }\n});\n\n\n\nvar Comment = React.createClass({\n  \n  rawMarkup: function() {\n    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});\n    return { __html: rawMarkup };\n  },\n  \n  render: function() {\n    return (\n      <div className=\"comment\">\n        <h2 className=\"commentAuthor\">\n          {this.props.name}\n        </h2>\n        <span dangerouslySetInnerHTML={this.rawMarkup()} />\n      </div>\n    );\n  }\n});\n\n\n\n$( document ).ready(function() {\n  ReactDOM.render(\n    <CommentBox url=\"/api/comments\" pollInterval={2000} />,\n    document.getElementById('content')\n  );\n});\n"],"sourceRoot":"/source/"}