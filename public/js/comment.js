"use strict";

var data = [{ id: 1, name: "Pete Hunt", text: "This is one comment" }, { id: 2, name: "Jordan Walke", text: "This is *another* comment" }];

var CommentBox = React.createClass({
  displayName: "CommentBox",

  loadCommentsFromServer: function loadCommentsFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: (function (data) {
        this.setState({ data: data });
      }).bind(this),
      error: (function (xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }).bind(this)
    });
  },

  handleCommentSubmit: function handleCommentSubmit(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({ data: newComments });
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: (function (data) {
        this.setState({ data: data });
      }).bind(this),
      error: (function (xhr, status, err) {
        this.setState({ data: comments }); //remove our optimism
        console.error(this.props.url, status, err.toString());
      }).bind(this)
    });
  },

  getInitialState: function getInitialState() {
    return { data: [] };
  },

  componentDidMount: function componentDidMount() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "commentBox" },
      React.createElement(
        "h1",
        null,
        "Comments"
      ),
      React.createElement(CommentList, { data: this.state.data }),
      React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit })
    );
  }
});

var CommentList = React.createClass({
  displayName: "CommentList",

  render: function render() {
    var commentNodes = this.props.data.map(function (comment) {
      return React.createElement(
        Comment,
        { name: comment.name, key: comment.id },
        comment.text
      );
    });
    return React.createElement(
      "div",
      { className: "commentList" },
      commentNodes
    );
  }
});

var CommentForm = React.createClass({
  displayName: "CommentForm",

  getInitialState: function getInitialState() {
    return { name: '', text: '' };
  },
  handleAuthorChange: function handleAuthorChange(e) {
    this.setState({ name: e.target.value });
  },
  handleTextChange: function handleTextChange(e) {
    this.setState({ text: e.target.value });
  },
  handleSubmit: function handleSubmit(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var text = this.state.text.trim();
    if (!text || !name) {
      return;
    }
    this.props.onCommentSubmit({ name: name, text: text });
    this.setState({ name: '', text: '' });
  },

  render: function render() {
    return React.createElement(
      "form",
      { className: "commentForm", onSubmit: this.handleSubmit },
      React.createElement(
        "div",
        { className: "form-group" },
        React.createElement(
          "label",
          null,
          "Name:"
        ),
        React.createElement("input", { className: "form-control", type: "text", placeholder: "Your name", value: this.state.name, onChange: this.handleAuthorChange })
      ),
      React.createElement(
        "div",
        { className: "form-group" },
        React.createElement(
          "label",
          null,
          "Comment:"
        ),
        React.createElement("textarea", { className: "form-control", type: "text", placeholder: "Say something...", value: this.state.text, onChange: this.handleTextChange })
      ),
      React.createElement("input", { className: "btn btn-default", type: "submit", value: "Post" })
    );
  }
});

var Comment = React.createClass({
  displayName: "Comment",

  rawMarkup: function rawMarkup() {
    var rawMarkup = marked(this.props.children.toString(), { sanitize: true });
    return { __html: rawMarkup };
  },

  render: function render() {
    return React.createElement(
      "div",
      { className: "comment" },
      React.createElement(
        "h2",
        { className: "commentAuthor" },
        this.props.name
      ),
      React.createElement("span", { dangerouslySetInnerHTML: this.rawMarkup() })
    );
  }
});

$(document).ready(function () {
  ReactDOM.render(React.createElement(CommentBox, { url: "/api/comments", pollInterval: 2000 }), document.getElementById('content'));
});
//# sourceMappingURL=comment.js.map
