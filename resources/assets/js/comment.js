var data = [
  {id: 1, name: "Pete Hunt", text: "This is one comment"},
  {id: 2, name: "Jordan Walke", text: "This is *another* comment"}
];

var CommentBox = React.createClass({

  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments}); //remove our optimism
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },

  getInitialState: function() {
    return {data: []};
  },

 componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },

  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});



var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment name={comment.name} key={comment.id}>
          {comment.text}
        </Comment>
        );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
    
  }
});



var CommentForm = React.createClass({

  getInitialState: function() {
    return {name: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({name: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var name = this.state.name.trim();
    var text = this.state.text.trim();
    if (!text || !name) {
      return;
    }
    this.props.onCommentSubmit({name: name, text: text});
    this.setState({name: '', text: ''});
  },


  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
         <div className="form-group">
          <label>Name:</label>
          <input className="form-control" type="text" placeholder="Your name" value={this.state.name} onChange={this.handleAuthorChange} />
        </div>
        <div className="form-group">
          <label>Comment:</label>
          <textarea className="form-control" type="text" placeholder="Say something..." value={this.state.text} onChange={this.handleTextChange} ></textarea>
        </div>
        <input className="btn btn-default" type="submit" value="Post" />
      </form>
    );
  }
});



var Comment = React.createClass({
  
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },
  
  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.name}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});



$( document ).ready(function() {
  ReactDOM.render(
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.getElementById('content')
  );
});
